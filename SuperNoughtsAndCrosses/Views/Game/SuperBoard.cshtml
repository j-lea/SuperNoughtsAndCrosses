@using SuperNoughtsAndCrosses.models
@model SuperNoughtsAndCrosses.models.SuperGameBoard;

<script src="/socket.io/socket.io.js"></script>
<script>
    var socket = io("wss://localhost:5001/ws");

    socket.on('connecting', () => console.log("connecting"));
//    socket = new WebSocket();
    
//    socket.onopen = () => console.log("Socket open");
//    socket.onclose = () => console.log("Socket closed");
//    socket.onerror = () => console.log("Socket error");
//    socket.onmessage = (event) => {
//        console.log(event.data);
//        $('.super-board').load(
//            '@Url.Action("RefreshBoard", $"Game", null)');
//    }
</script>

<div class="super-board">
    @for (var row = 0; row < Model.GetSize(); row++)
    {
        <div class="board-row board-row-@(row)">
            @for (var col = 0; col < Model.GetSize(); col++)
            {
                <div class="@GetClassName(row, col)" row="@row" col="@col">
                    @{Html.RenderPartial("Board", Model.GetBoardAtPosition(row, col));}
                </div>
            }
        </div>
    }
</div>

@{
    if (Model.IsGameOver())
    {
        if (Model.GetWinner() == Player.NONE)
        {
            <div class="game-over">Game Over. No one wins.</div>
        }
        else
        {
            <div class="game-over">Game Over. @Model.GetWinner() has won.</div>
        }
    }
}

@{

    string GetClassName(int row, int col)
    {
        var isValidBoard = !Model.GameOverOnBoard(row, col) && (Model.IsNextBoard(row, col) || Model.GameOverOnNextBoard());
        var chosenBoard = isValidBoard ? "board-chosen" : "";
        return $"board board-{col} {chosenBoard}";
    }
}